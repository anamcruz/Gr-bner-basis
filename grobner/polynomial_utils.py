# pylint: disable=consider-using-f-string
# pylint: disable = unrecognized-option
"""Polynomial utilities"""

import sympy as sym


def get_standard_generators():
    return sym.symbols('x,y,z,w')


def get_all_generators(polynomial_set):
    """Gets the generators of the polynomials in a polynomial set.
    Args:
        polynomial_set: List of polynomials of type sympy.poly.
    Returns:
        List of polynomial generators of type sympy.symbols.
    """
    set_of_generators = set()
    for polynomial in polynomial_set:
        for generator in list(polynomial.gen):
            set_of_generators.add(generator)

    list_of_generators = list(set_of_generators)

    return list_of_generators


def order_polynomials(polynomial_set,
                      order='grevlex',
                      gens=get_standard_generators()):
    """Orders a polynomial list by a chosen monomial ordering."""
    return sorted(polynomial_set,
                  key=sym.polys.orderings.monomial_key(order, gens))


def is_poly_zero(polynomial):
    return polynomial.as_expr() == 0


def is_poly_constant(polynomial, gens):
    """Returns true if polynomial is constant."""
    # Creates a list with the degree of the polynomial as a single variable
    # polynomial when written in each of the variables that appear in the
    # polynomial.
    # Asking for the degree of a multivariable polynomial will return the
    # degree of the polynomial in the first element of the list of generators,
    # even if that generator does not appear in the polynomial expression, e.g.
    # sym.poly(y**2+1, x,y).degree() returns 0.
    degrees = [sym.degree(polynomial, variable) for variable in gens]
    # Returns true if no degree is different from zero
    return not any(degrees)


def non_divisible_terms(polynomial, monomial):
    """Terms in a polynomial that are not divisible by a monomial."""
    # Adding sym.O(monomial) to a polynomial considers all the multiples of
    # the monomial as 'not relevant'. In ring theory terms, we are
    # considering the polynomial as an element of the quotient of the
    # polynomial ring by the ideal generated by the monomial.
    # The removeO() returns the minimal representative of this element in the
    # polynomial ring.
    return (polynomial.as_expr() + sym.O(monomial.as_expr())).removeO()


def divisible_terms(polynomial, monomial):
    """Returns the terms in a polynomial that are divisible by a monomial.
    Given a pair of a polynomial and a monomial, the function returns the
    polynomial with all its terms that are non-divisible by the monomial set
    to zero.
    E.g. divisible_terms(x**2+2*x+1, x) = x**2+2*2
    Args:
        polynomial: sympy polynomial or polynomial expression.
        monomial: sympy polynomial or expression composed of a single monomial.
    Returns:
        A polynomial expression made of the terms of the input polynomial whose
        terms are divisible by the input monomial.
    """
    return polynomial.as_expr() - non_divisible_terms(polynomial, monomial)


def subtract_divisible_terms(poly_1,
                             poly_2,
                             order='grevlex',
                             gens=get_standard_generators()):
    """Returns poly_1 with all the multiples of LT(poly_2) removed."""
    leading_term = sym.poly(sym.LT(poly_2, order=order, gens=gens), gens=gens)
    div_terms = divisible_terms(poly_1, leading_term)
    poly_to_subtract = sym.div(div_terms, leading_term, gens=gens)[0] * poly_2
    return sym.simplify(poly_1 - poly_to_subtract)


def get_variable_list(n_variables):
    """Returns a list of variables"""
    return list(sym.symbols('x0:%d' % n_variables))
